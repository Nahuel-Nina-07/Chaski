name: Deploy API to MonsterASP.NET with Notifications

on:
  push:
    branches: [ "develop" ]

jobs:
  deploy-and-notify:
    runs-on: windows-latest
    steps:
      # --- Paso 1: Checkout del código ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Paso 2: Compilar la API (.NET) ---
      - name: Build .NET API
        run: |
          dotnet restore
          dotnet publish -c Release -o ./publish

      # --- Paso 3: Desplegar en MonsterASP.NET ---
      - name: Deploy via Web Deploy
        uses: microsoft/web-deploy@v1
        with:
          publishUrl: ${{ secrets.WEBDEPLOY_SERVER }}:8172
          publishSite: ${{ secrets.WEBSITE_NAME }}
          username: ${{ secrets.WEBDEPLOY_USERNAME }}
          password: ${{ secrets.WEBDEPLOY_PASSWORD }}
          package: './publish'
          removeAdditionalFiles: true

      # --- Paso 4: Notificación en Slack ---
      - name: Prepare Slack Notification
        id: prepare-slack-notification
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "SLACK_TITLE=✅ Despliegue exitoso" >> $GITHUB_ENV
            echo "SLACK_MESSAGE=API publicada en ${{ secrets.WEBSITE_NAME }}" >> $GITHUB_ENV
            echo "SLACK_COLOR=good" >> $GITHUB_ENV
          else
            echo "SLACK_TITLE=❌ Error en despliegue" >> $GITHUB_ENV
            echo "SLACK_MESSAGE=Revisa los logs del job ${{ github.run_id }}" >> $GITHUB_ENV
            echo "SLACK_COLOR=danger" >> $GITHUB_ENV
          fi

      - name: Send Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ env.SLACK_COLOR || '#FF0000' }}
          SLACK_TITLE: ${{ env.SLACK_TITLE || 'Notificación de despliegue' }}
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE || 'Mensaje no disponible' }}
          SLACK_USERNAME: "Backend Chaski"